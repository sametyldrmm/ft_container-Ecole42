şimdi ne nedir

vector yapısı
    elimizde allocator dediğmiz bir şey var bu yer açma değerleri işleme gibi işlemler için kullanıyoruz
    en basit anlatım şu şekilde yapılabilir
    siz vector<int> a dediğinizde bir boş bir yapı oluşturuyorsunuz
    elinizde olan işlevlerle buna birşeyler ekleyip çıkaracaksınız
    bu işlevlerinizin yapı taşları bu allocator dedğimiz yapıdır
    mesala 
    siz bir vector<int> a oluşturdunuz
    a.push_back(4);
    a.push_back(5);
    dediğinizde olan olayların sırası şudur ilk başta kapasite kontrol edilir çünkü siz 1 yer açmak istediğinizde
    allocator size birden fazla yer verebilir
    bu allocator dediğimiz şey bir toplu malloc yapısı gibi düşünülebilir bunun classlaştırılmış hali
    allocator.allocate(1) dediğimizde bize 1 yermi daha fazla yermi vereceğini bilmiyoruz en az 1 olduğundan eminiz sadece
    ve allocator ın verebileceği alan sınırlıda olabilir yani yetersiz de olabilir kontrol şart

    lafı uzattık biraz kafa karıştırıcı bende tam çözemiyorum

    şimdi biraz daha özet yapmayı deniycem
    allocator kullanırız vectörlerde
    allocator malloc paketi gibi düşünülebilir geliştirilmiş hali
    vector klasımıza aktardığımızda bize bazı kullanabileceğimiz yapılarda verir hazır
    bunu şu şekilde düşünmenin yanlış olmadığını düşünüyorum 
    c de siggaction kullandığınızda sizden hazır bir structa alır ve içerisini kendi doldurur siz kullanırsınız
    buna benzer bir yapı var aslında basit tanımlamalar bunlar keywordlar gibi daha çok 
    (not bunlar kendime yazdığım notlardır bir başkası okur ise %100 doğru değildir)
    ne demek istiyoruz template ne işe yarar herhangi bir tipi kullanmamıza olanak sağlar
    bunu nasıl yapar işin hammalığını yaparak yazdığımız kodu çoğaltır uygun hale getirir(emin değilim)
    bu allocator template ile kullanıncada aynsıı olur ben allocator_type kullanınca tüm typlara dönebiliyor
    bu şekilde her zaman hangi type sahip olduğumu bilmesemde bunun ram ile ilgili bilgilerini bununla ulaşabilirim
    yada pointer bana basit bir size_t a yapısı verir gibi çalışır ama herşeye rahat entegre edilebilir 
    o yüzden keyword gibi dedim aslında
